/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { INodeRegistry, INodeRegistryInterface } from "../INodeRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "registerer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "callbackUrl",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "location",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "industryCode",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "enum NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "enum NodeStatus",
            name: "status",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct NodeEntry",
        name: "node",
        type: "tuple",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
    ],
    name: "getNode",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "callbackUrl",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "location",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "industryCode",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "enum NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "enum NodeStatus",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct NodeEntry",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "callbackUrl",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "location",
            type: "string[]",
          },
          {
            internalType: "string",
            name: "industryCode",
            type: "string",
          },
          {
            internalType: "enum NodeType",
            name: "nodeType",
            type: "uint8",
          },
        ],
        internalType: "struct RegisterNodeEntryParams",
        name: "entry",
        type: "tuple",
      },
    ],
    name: "registerNode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class INodeRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): INodeRegistryInterface {
    return new Interface(_abi) as INodeRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): INodeRegistry {
    return new Contract(address, _abi, runner) as unknown as INodeRegistry;
  }
}
